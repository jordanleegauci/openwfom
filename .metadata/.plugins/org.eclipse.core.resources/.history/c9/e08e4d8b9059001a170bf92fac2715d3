package infoScreen.views;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;

public class infoScreen extends JFrame {

	private JPanel contentPane;
	private JTextField uniField;
	private JLabel lblEnterTheMouse;
	private JTextField mouseField;
	JSONObject archive = readJSON("archive");

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		} catch (Throwable e) {
			e.printStackTrace();
		}
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					infoScreen frame = new infoScreen();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 * @throws JSONException 
	 * @throws FileNotFoundException 
	 */
	public infoScreen() throws JSONException, FileNotFoundException {
		setResizable(false);
		setTitle("Info");
		initComponents();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 147, 375);

	}

	private void initComponents() throws JSONException {
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		
		uniField = new JTextField();
		uniField.setColumns(10);
		
		JLabel lblUni = new JLabel("Enter Your UNI:");
	
		
		lblEnterTheMouse = new JLabel("Enter the Mouse Name:");
		
		mouseField = new JTextField();
		mouseField.setColumns(10);
		final JLabel lblSelectMouse = new JLabel("Select the Mouse");
		FileReader reader;
		JSONArray mice = new JSONArray();
		JSONArray settings = new JSONArray();
		try {
			System.out.println(Paths.get(".").toAbsolutePath().normalize().toString());
			reader = new FileReader("archive.json");
			JSONTokener tokener = new JSONTokener(reader);
			JSONObject obj = new JSONObject(tokener);
			mice = obj.getJSONObject("mice").names();
			settings = obj.getJSONObject("settings").names();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String[] mice_names = new String[mice.length()];
		for (int i=0; i<mice.length(); i++) {
		    mice_names[i] = mice.getString(i);
		}
		
		String[] settings_names = new String[settings.length()];
		for (int i=0; i<settings.length(); i++) {
			settings_names[i] = settings.getString(i);
		}
		final JCheckBox chckbxNewMouse = new JCheckBox("New Mouse?");
		
		final JComboBox comboboxMouse = new JComboBox();
		comboboxMouse.setModel(new DefaultComboBoxModel(mice_names));
		chckbxNewMouse.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (chckbxNewMouse.isSelected()) {
					comboboxMouse.setEnabled(false);
					lblSelectMouse.setEnabled(false);
					mouseField.setEnabled(true);
					lblEnterTheMouse.setEnabled(true);
				}
				else {
					comboboxMouse.setEnabled(true);
					lblSelectMouse.setEnabled(true);
					mouseField.setEnabled(false);
					lblEnterTheMouse.setEnabled(false);
				}
			}
		});

		mouseField.setEnabled(false);
		lblEnterTheMouse.setEnabled(false);
		
		final JComboBox comboboxSettings = new JComboBox();
		comboboxSettings.setModel(new DefaultComboBoxModel(settings_names));
		comboboxSettings.setEnabled(false);
		final JLabel lblSelectTheSettings = new JLabel("Select the Settings");
		lblSelectTheSettings.setEnabled(false);
		
		final JCheckBox useExistingSettings = new JCheckBox("Use Existing Settings");
		JButton btnContinue = new JButton("Continue");
		btnContinue.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				createSettings();
			}
		});
		useExistingSettings.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (useExistingSettings.isSelected()) {
					comboboxSettings.setEnabled(true);
					lblSelectTheSettings.setEnabled(true);
				}
				else {
					comboboxSettings.setEnabled(false);
					lblSelectTheSettings.setEnabled(false);

				}
			}
		});
		
				
		JSeparator separator = new JSeparator();
		
		JSeparator separator_1 = new JSeparator();
		
		
	}

	protected void createSettings() {
		try {
			String mouse = new String();
			String uni = uniField.getText();
			JSONObject settings = new JSONObject();
			JSONObject info = new JSONObject();
			
			if (chckbxNewMouse.isSelected()){
				mouse = mouseField.getText();
				JSONObject mice = archive.getJSONObject("mice");
				JSONObject last_trial = new JSONObject();
				last_trial.put("last_trial", 0);
				mice.put(mouse, last_trial);
				archive.put("mice", mice);
				writeJSON(archive, "archive");
			}
			else {
				mouse = comboboxMouse.getSelectedItem().toString();
			}
			
			info.put("uni", uni);
			info.put("mouse", mouse);
			Date date = new Date();
			SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
			info.put("timestamp", formatter.format(date).toString());
			
			if (useExistingSettings.isSelected()) {
				// If Existing Settings are to be used
				String settingsName = comboboxSettings.getSelectedItem().toString();
				JSONObject settings = readJSON("archive");
				settings.put("settings", settingsName);
				settings.put("info", info);
				settings.put("status", 2);
			}
			else {
				settings.put("info", info);
				
			}
			writeJSON(settings, "settings");
			System.exit(0);
		} catch (IOException | JSONException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
	}

	protected void writeJSON(JSONObject o, String file) throws IOException {
		FileWriter f = new FileWriter(file+".json");
		f.write(o.toString());
		f.flush();
		f.close();
	}

	protected JSONObject readJSON(String file) throws FileNotFoundException, JSONException {
		FileReader r = new FileReader(file+".json");
		JSONTokener t = new JSONTokener(r);
		JSONObject obj = new JSONObject(t);
		return obj;
	}
}
