import serial, time, json
from gui import Gui

class Arduino():
    """ Methods pertaining to Communication with the Arduino """

    def __init__(self):
        pass

    def get_message(dst):

        """

        This method takes in the destination path generated by the SPLASSH gui
        to store the settings.json.

        It then uses that path to Parse the settings.json file and generate a
        readable string (or message) to be send to the Arduino.

        """

        print("Reading setting from "+dst)
        with open(dst) as f:
            settings = json.load(f)
        f.close()
        exp = settings["camera"]["exposure"]
        ord = settings["camera"]["strobe_order"]
        frm = settings["camera"]["framerate"]
        message = "E"+exp+"O"+"".join([o[0] for o in ord])+"F"+frm
        return message

    def message_to_arduino(msg):

        """
        This method takes the msg string that was generated in get_message
        and sends it to the Arduino.

        The Arduino is then able to parse the message and set the proper strobe
        parameters.
        """
        port = "COM4"
        print("Sending "+msg+" to the Arduino")
        try:
            ser = serial.Serial(
                port=port,\
                baudrate=115200,\
                parity=serial.PARITY_NONE,\
                stopbits=serial.STOPBITS_ONE,\
                bytesize=serial.EIGHTBITS,\
                    timeout=0)
            time.sleep(3)
            ser.write(bytes(msg, "utf-8"))
            ser.flush()
            ser.close()
        except serial.SerialException as e:
            print("Unable to connect to Arduino through "+port)
            Gui.exit()

    def test_arduino():
        print("Testing Connection to the Arduino")
        port = "COM4"
        try:
            ser = serial.Serial(
                port=port,\
                baudrate=115200,\
                parity=serial.PARITY_NONE,\
                stopbits=serial.STOPBITS_ONE,\
                bytesize=serial.EIGHTBITS,\
                    timeout=0)
            time.sleep(3)
            ser.write(bytes("s", "utf-8"))
            ser.flush()
            ser.close()
            print("Arduino Connected to "+port)
            return 1
        except serial.SerialException as e:
            print(Fore.RED + "Unable to connect to Arduino through "+port)
            print(Style.RESET_ALL)
            return 0
